%{

#include <iostream>
#include <cstdlib>
#include <map>
#include <string>
#include "RegIzraz.hpp"

extern int yylex();

#include "parser.tab.hpp"

void yyerror(const char *msg) {
    cerr << msg << endl;
    exit(EXIT_FAILURE);
}

map<string, RegIzraz* > mapar;
map<string, string* > mapas;

%}

%union {
    string          *s;
    RegIzraz        *r;
    char            c;
}

%token  <s>     karak_klasa
%token  <s>     string_literal
%token          op_dodele
%token  <s>     id_izraz
%token  <s>     id_string
%token  <c>     karakter;
%token          print_token;
%token          printstring_token;
%token          check_token;

%type   <r>     RE
%type   <r>     RET
%type   <r>     REF
%type   <s>     SE

%%

NIZ_NAREDBI: NAREDBA ';' NIZ_NAREDBI
|
;
NAREDBA: id_izraz op_dodele RE {
    //if (mapar.find(*$1) != mapar.end()) {
    //delete mapar[*$1];
    //}
    mapar[*$1] = $3;
    delete $1;
}
| print_token '(' RE ')' {
    $3->ispis();
    cout << endl;
}
| id_string op_dodele SE {
    //if (mapas.find(*$1) != mapas.end()) {
    //delete mapas[*$1];
    //}
    mapas[*$1] = $3;
    delete $1;
}
| printstring_token '(' SE ')' {
    cout << *$3 << endl;
}
| check_token '(' RE ','  SE ')' {
    if ($3->check(*$5)) {
        cout << *$5 << " pripada jeziku ";
        $3->ispis();
        cout << endl;
    } else {
        cout << *$5 << " ne pripada jeziku ";
        $3->ispis();
        cout << endl;
    }
}

SE: string_literal {
    $$ = new string($1->begin() + 1, $1->end() - 1);
    delete $1;
}
| id_string {
    if (mapas.find(*$1) == mapas.end()) {
        cerr << "Promenljiva nije def!" << endl;
        delete $1;
        exit(EXIT_FAILURE);
    }

    $$ = mapas[*$1];
    delete $1;
}
;

;
RE: RE '|' RET {
    $$ = new Disjunkcija($1, $3);
}
| RET {
    $$ = $1;
}
;
RET: RET REF {
    $$ = new Konkatenacija($1, $2);
}
| REF {
    $$ = $1;
}
;
REF: karakter {
    $$ = new Konstanta($1);
}
| '(' RE ')' {
    $$ = $2;
}
| REF '*' {
    $$ = new Zvezda($1);
}
| REF '+' {
    $$ = new Plus($1);
}
| id_izraz {
    if (mapar.find(*$1) == mapar.end()) {
        cerr << "Promenljiva nije def!" << endl;
        delete $1;
        exit(EXIT_FAILURE);
    }

    $$ = mapar[*$1];
    delete $1;
}
| karak_klasa {
    $$ = new KarakKlasa(*$1);
    delete $1;
}
;
%%

int main() {
    yyparse();

}

